import { 
  db, 
  auth, 
  signInWithEmailAndPassword, 
  signOut,
  onAuthStateChanged,
  collection,
  doc,
  getDoc,
  setDoc,
  updateDoc,
  addDoc,
  increment,
  serverTimestamp,
  query,
  where,
  getDocs
} from './firebase-config.js';

// DOM ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü
const app = document.getElementById('app');
let currentUser = null;
const ADMIN_UID = "dfAI8a7DfMRxgeymYJlGwuruxz63"; // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® UID

// ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï UI
function renderHome() {
  app.innerHTML = `
    <header>
      <h1>‡¶≤‡¶æ‡¶ï‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ó‡ßá‡¶Æ</h1>
      <button id="authBtn">‡¶°‡¶ø‡¶≤‡¶æ‡¶∞/‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶≤‡¶ó‡¶á‡¶®</button>
    </header>
    <main>
      <section id="results">
        <h2>‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü</h2>
        <div id="todayResults">‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</div>
      </section>
      <div id="gamePanel" style="display:none;"></div>
    </main>
  `;
  document.getElementById('authBtn').addEventListener('click', handleAuth);
}

// ‡¶≤‡¶ó‡¶á‡¶®/‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü
async function handleAuth() {
  if (currentUser) {
    await signOut(auth);
    currentUser = null;
    alert('‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
    renderHome();
  } else {
    const email = prompt("‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¶‡¶ø‡¶®:");
    const password = prompt("‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶®:");
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      currentUser = userCredential.user;
      alert("‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤!");
      renderGamePanel();
    } catch (error) {
      alert("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: " + error.message);
    }
  }
}

// ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï
function isAdmin() {
  return currentUser && currentUser.uid === ADMIN_UID;
}

// ‡¶ó‡ßá‡¶Æ ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤
async function renderGamePanel() {
  const gamePanel = document.getElementById('gamePanel');
  gamePanel.style.display = 'block';
  
  const adminPanelHTML = isAdmin() ? `
    <section class="admin-panel">
      <h3>üîí ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤</h3>
      <div class="admin-actions">
        <button id="declareResultBtn">‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶ò‡ßã‡¶∑‡¶£‡¶æ</button>
        <button id="addTokensBtn">‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°</button>
        <button id="deductTokensBtn">‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶°‡ßá‡¶¨‡¶ø‡¶ü</button>
        <button id="viewAllTxnsBtn">‡¶∏‡¶¨ ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®</button>
      </div>
    </section>
  ` : `
    <button id="viewMyTxnsBtn">‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶®</button>
  `;

  gamePanel.innerHTML = `
    <div class="game-container">
      <section id="gameSection">
        <h2>‡¶¨‡¶æ‡¶ú‡¶ø ‡¶ß‡¶∞‡ßÅ‡¶® (0-9)</h2>
        <div class="numberPad"></div>
        <div id="wallet">‡¶ü‡ßã‡¶ï‡ßá‡¶®: ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</div>
        <div id="betHistory"></div>
      </section>
      ${adminPanelHTML}
      <div id="txnHistory"></div>
    </div>
  `;

  generateNumberPad();
  loadWallet();
  loadBetHistory();

  if (isAdmin()) {
    document.getElementById('declareResultBtn').addEventListener('click', declareResult);
    document.getElementById('addTokensBtn').addEventListener('click', addTokens);
    document.getElementById('deductTokensBtn').addEventListener('click', deductTokens);
    document.getElementById('viewAllTxnsBtn').addEventListener('click', () => loadTransactions(true));
  } else {
    document.getElementById('viewMyTxnsBtn').addEventListener('click', () => loadTransactions(false));
  }
}

// ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡ßç‡¶Ø‡¶æ‡¶°
function generateNumberPad() {
  const pad = document.querySelector('.numberPad');
  pad.innerHTML = '';
  for (let i = 0; i <= 9; i++) {
    const btn = document.createElement('button');
    btn.className = 'numberBtn';
    btn.textContent = i;
    btn.addEventListener('click', () => placeBet(i));
    pad.appendChild(btn);
  }
}

// ‡¶ì‡ßü‡¶æ‡¶≤‡ßá‡¶ü
async function loadWallet() {
  if (!currentUser) return;
  const walletRef = doc(db, 'wallets', currentUser.uid);
  const snap = await getDoc(walletRef);
  const balance = snap.exists() ? snap.data().balance || 0 : 0;
  document.getElementById('wallet').textContent = `‡¶ü‡ßã‡¶ï‡ßá‡¶®: ${balance}`;
}

// ‡¶¨‡ßá‡¶ü ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø
async function loadBetHistory() {
  if (!currentUser) return;
  const q = query(collection(db, 'bets'), where('userId', '==', currentUser.uid));
  const snap = await getDocs(q);
  let html = '<h3>‡¶¨‡ßá‡¶ü ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø</h3>';
  snap.forEach(docSnap => {
    const data = docSnap.data();
    html += `<div class="bet-entry">
      <span>${data.number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞</span>
      <span>${data.tokens} ‡¶ü‡ßã‡¶ï‡ßá‡¶®</span>
    </div>`;
  });
  document.getElementById('betHistory').innerHTML = html;
}

// ‡¶¨‡¶æ‡¶ú‡¶ø ‡¶ß‡¶∞‡¶æ
async function placeBet(number) {
  if (!canPlaceBet()) {
    alert("‡¶è‡¶ñ‡¶® ‡¶¨‡ßá‡¶ü‡¶ø‡¶Ç ‡¶¨‡¶®‡ßç‡¶ß!");
    return;
  }
  const tokens = parseInt(prompt(`‡¶ï‡¶§ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶æ‡¶ú‡¶ø ‡¶ß‡¶∞‡¶¨‡ßá‡¶®? (${number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞)`));
  if (tokens > 0) {
    await addDoc(collection(db, 'bets'), {
      userId: currentUser.uid,
      number,
      tokens,
      timestamp: serverTimestamp()
    });
    alert(`${number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ${tokens} ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶æ‡¶ú‡¶ø ‡¶ß‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`);
    loadBetHistory();
  }
}

// ‡¶¨‡ßá‡¶ü ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶ö‡ßá‡¶ï
function canPlaceBet() {
  return true; // ‡¶Ü‡¶™‡¶æ‡¶§‡¶§ ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü ‡¶ö‡¶æ‡¶≤‡ßÅ
}

// ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶ò‡ßã‡¶∑‡¶£‡¶æ
async function declareResult() {
  const winningNumber = parseInt(prompt("‡¶ú‡¶Ø‡¶º‡ßÄ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ (0-9):"));
  if (winningNumber >= 0 && winningNumber <= 9) {
    await addDoc(collection(db, 'results'), {
      number: winningNumber,
      declaredBy: currentUser.email,
      timestamp: serverTimestamp()
    });
    alert(`‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü: ${winningNumber}`);
  }
}

// ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°
async function addTokens() {
  const userId = prompt("‡¶á‡¶â‡¶ú‡¶æ‡¶∞ UID:");
  const amount = parseInt(prompt("‡¶ï‡¶§ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°?"));
  const reason = prompt("‡¶ï‡¶æ‡¶∞‡¶£:");
  const walletRef = doc(db, 'wallets', userId);
  await setDoc(walletRef, { balance: increment(amount) }, { merge: true });
  await addDoc(collection(db, 'transactions'), {
    userId, type: 'credit', amount, reason,
    adminId: currentUser.uid, timestamp: serverTimestamp()
  });
  alert("‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá");
}

// ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶°‡ßá‡¶¨‡¶ø‡¶ü
async function deductTokens() {
  const userId = prompt("‡¶á‡¶â‡¶ú‡¶æ‡¶∞ UID:");
  const amount = parseInt(prompt("‡¶ï‡¶§ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶°‡ßá‡¶¨‡¶ø‡¶ü?"));
  const reason = prompt("‡¶ï‡¶æ‡¶∞‡¶£:");
  const walletRef = doc(db, 'wallets', userId);
  await setDoc(walletRef, { balance: increment(-amount) }, { merge: true });
  await addDoc(collection(db, 'transactions'), {
    userId, type: 'debit', amount, reason,
    adminId: currentUser.uid, timestamp: serverTimestamp()
  });
  alert("‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶°‡ßá‡¶¨‡¶ø‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá");
}

// ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø
async function loadTransactions(all = false) {
  let q;
  if (all && isAdmin()) {
    q = collection(db, 'transactions');
  } else {
    q = query(collection(db, 'transactions'), where('userId', '==', currentUser.uid));
  }
  const snap = await getDocs(q);
  let html = `<h3>‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø</h3>
    <table border="1">
      <tr><th>‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ</th><th>‡¶ü‡¶æ‡¶á‡¶™</th><th>‡¶ü‡ßã‡¶ï‡ßá‡¶®</th><th>‡¶ï‡¶æ‡¶∞‡¶£</th></tr>`;
  snap.forEach(docSnap => {
    const d = docSnap.data();
    html += `<tr>
      <td>${d.timestamp?.toDate().toLocaleString() || ''}</td>
      <td>${d.type}</td>
      <td>${d.amount}</td>
      <td>${d.reason || ''}</td>
    </tr>`;
  });
  html += `</table>`;
  if (isAdmin() && all) {
    html += `<button id="downloadCSV">CSV ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°</button>`;
  }
  document.getElementById('txnHistory').innerHTML = html;

  if (isAdmin() && all) {
    document.getElementById('downloadCSV').addEventListener('click', () => downloadCSV(snap));
  }
}

// CSV ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
function downloadCSV(snap) {
  let csv = "‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ,‡¶ü‡¶æ‡¶á‡¶™,‡¶ü‡ßã‡¶ï‡ßá‡¶®,‡¶ï‡¶æ‡¶∞‡¶£\n";
  snap.forEach(docSnap => {
    const d = docSnap.data();
    csv += `${d.timestamp?.toDate().toLocaleString() || ''},${d.type},${d.amount},${d.reason || ''}\n`;
  });
  const blob = new Blob([csv], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'transactions.csv';
  a.click();
}

// ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞
renderHome();

// Auth ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
onAuthStateChanged(auth, (user) => {
  currentUser = user;
  if (user) {
    renderGamePanel();
  } else {
    renderHome();
  }
});
