import { 
  db, 
  auth, 
  signInWithEmailAndPassword, 
  signOut,
  onAuthStateChanged,
  collection,
  doc,
  getDoc,
  setDoc,
  updateDoc,
  addDoc,
  increment,
  serverTimestamp
} from './firebase-config.js';

// DOM ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü
const app = document.getElementById('app');
let currentUser = null;
const ADMIN_UID = "dfAI8a7DfMRxgeymYJlGwuruxz63"; // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® UID

// ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï UI ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞
function renderHome() {
  app.innerHTML = `
    <header>
      <h1>‡¶≤‡¶æ‡¶ï‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ó‡ßá‡¶Æ</h1>
      <button id="authBtn">‡¶°‡¶ø‡¶≤‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶®</button>
    </header>
    <main>
      <section id="results">
        <h2>‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü</h2>
        <div id="todayResults">‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</div>
      </section>
      <div id="gamePanel" style="display:none;"></div>
    </main>
  `;
  document.getElementById('authBtn').addEventListener('click', handleAuth);
}

// ‡¶≤‡¶ó‡¶á‡¶®/‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async function handleAuth() {
  if (currentUser) {
    await signOut(auth);
    currentUser = null;
    alert('‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá');
    renderHome();
  } else {
    const email = prompt("‡¶°‡¶ø‡¶≤‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¶‡¶ø‡¶®:");
    const password = prompt("‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶®:");
    
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      currentUser = userCredential.user;
      alert("‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤!");
      renderGamePanel();
    } catch (error) {
      alert("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: " + error.message);
    }
  }
}

// ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶°)
async function isAdmin() {
  if (!currentUser) return false;
  return currentUser.uid === ADMIN_UID; // ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø UID ‡¶ö‡ßá‡¶ï
}

// ‡¶ó‡ßá‡¶Æ ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞
async function renderGamePanel() {
  const gamePanel = document.getElementById('gamePanel');
  gamePanel.style.display = 'block';
  
  const adminPanelHTML = await isAdmin() ? `
    <section class="admin-panel">
      <h3>üîí ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤</h3>
      <div class="admin-actions">
        <button id="declareResultBtn">‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶ò‡ßã‡¶∑‡¶£‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®</button>
        <button id="addTokensBtn">‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</button>
      </div>
    </section>
  ` : '';

  gamePanel.innerHTML = `
    <div class="game-container">
      <section id="gameSection">
        <h2>‡¶¨‡¶æ‡¶ú‡¶ø ‡¶ß‡¶∞‡ßÅ‡¶® (1-9)</h2>
        <div class="numberPad"></div>
        <div id="wallet">‡¶ü‡ßã‡¶ï‡ßá‡¶®: 0</div>
      </section>
      ${adminPanelHTML}
    </div>
  `;

  generateNumberPad();
  if (await isAdmin()) {
    document.getElementById('declareResultBtn').addEventListener('click', declareResult);
    document.getElementById('addTokensBtn').addEventListener('click', addTokens);
  }
}

// ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡ßç‡¶Ø‡¶æ‡¶° ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü
function generateNumberPad() {
  const pad = document.querySelector('.numberPad');
  pad.innerHTML = '';
  
  for (let i = 0; i <= 9; i++) {
    const btn = document.createElement('button');
    btn.className = 'numberBtn';
    btn.textContent = i;
    btn.addEventListener('click', () => placeBet(i));
    pad.appendChild(btn);
  }
}

// ‡¶¨‡¶æ‡¶ú‡¶ø ‡¶ß‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async function placeBet(number) {
  if (!canPlaceBet()) {
    alert("‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶¨‡ßá‡¶ü‡¶ø‡¶Ç ‡¶¨‡¶®‡ßç‡¶ß!");
    return;
  }

  const tokens = parseInt(prompt(`‡¶ï‡¶§ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶æ‡¶ú‡¶ø ‡¶ß‡¶∞‡¶¨‡ßá‡¶®? (${number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞)`));
  if (tokens > 0) {
    try {
      await addDoc(collection(db, 'bets'), {
        userId: currentUser.uid,
        number: number,
        tokens: tokens,
        timestamp: serverTimestamp()
      });
      alert(`${number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ${tokens} ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶æ‡¶ú‡¶ø ‡¶ß‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!`);
    } catch (error) {
      alert("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: " + error.message);
    }
  }
}

// ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶®
function canPlaceBet() {
  const now = new Date();
  const currentHour = now.getHours();
  const currentMin = now.getMinutes();
  const gameTimes = [11, 13, 14.5, 15.5, 16.5, 18, 19.5, 21]; // [11AM, 1PM, 2:30PM...]
  
  for (const time of gameTimes) {
    const [hour, min] = [Math.floor(time), (time % 1) * 60];
    if (
      currentHour === hour && 
      currentMin >= min - 20 && 
      currentMin < min
    ) return true;
  }
  return false;
}

// ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶ò‡ßã‡¶∑‡¶£‡¶æ
async function declareResult() {
  const winningNumber = parseInt(prompt("‡¶ú‡ßü‡ßÄ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (0-9):"));
  if (winningNumber >= 0 && winningNumber <= 9) {
    try {
      await addDoc(collection(db, 'results'), {
        number: winningNumber,
        declaredBy: currentUser.email,
        timestamp: serverTimestamp()
      });
      alert(`‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: ${winningNumber}`);
    } catch (error) {
      alert("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: " + error.message);
    }
  }
}

// ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°
async function addTokens() {
  const userId = prompt("‡¶á‡¶â‡¶ú‡¶æ‡¶∞ UID ‡¶¶‡¶ø‡¶®:");
  const amount = parseInt(prompt("‡¶ï‡¶§ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?"));
  
  if (userId && amount) {
    try {
      const walletRef = doc(db, 'wallets', userId);
      await setDoc(walletRef, {
        balance: increment(amount),
        lastUpdated: serverTimestamp()
      }, { merge: true });
      alert(`${amount} ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!`);
    } catch (error) {
      alert("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: " + error.message);
    }
  }
}

// ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú
renderHome();

// Auth ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶≤‡¶ø‡¶∏‡ßá‡¶®‡¶æ‡¶∞
onAuthStateChanged(auth, (user) => {
  currentUser = user;
  if (user) {
    renderGamePanel();
  } else {
    renderHome();
  }
});
